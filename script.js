var map = L.map("map", {
  center: [15.87, 107.81],
  zoom: 6,
  minZoom: 5,
  maxZoom: 12,
  maxBounds: [
    [4.0, 100.0],
    [25.0, 120.0],
  ],
  maxBoundsViscosity: 0.8,
  renderer: L.svg({ padding: 0.5 }),
});

// N·∫øu pane marker ƒë√£ t·ªìn t·∫°i th√¨ x√≥a ƒëi
if (map.getPane("markerPane")) {
  map.removeLayer(map.getPane("markerPane"));
}

// T·∫°o pane cho c√°c d·∫•u ch·∫•m, g·∫Øn class ƒë·ªÉ style b·∫±ng CSS
const markerPane = map.createPane("markerPane");
markerPane.classList.add("marker-pane");

// Lo·∫°i b·ªè layer OpenStreetMap n·∫øu c√≥
map.eachLayer(function (layer) {
  if (layer instanceof L.TileLayer) {
    map.removeLayer(layer);
  }
});

// H√†m load GeoJSON cho c√°c v√πng
function addVietnamLayer(geojsonPath, color = "#d3daf0") {
  return new Promise((resolve, reject) => {
    $.getJSON(geojsonPath)
      .done(function (data) {
        L.geoJSON(data, {
          style: function (feature) {
            return {
              color: "#999999",
              weight: 1,
              fillColor:
                feature.properties.ten_tinh === "ƒê√† N·∫µng" ? "#2548b4" : color,
              fillOpacity: 1,
            };
          },
          onEachFeature: function (feature, layer) {
            layer.bindPopup(feature.properties.ten_tinh);
          },
        }).addTo(map);
        resolve();
      })
      .fail(reject);
  });
}

// Load c√°c layer GeoJSON: Vi·ªát Nam, Tr∆∞·ªùng Sa, Ho√†ng Sa
addVietnamLayer("vietnam.geojson.json");
addVietnamLayer("truongsa.json", "#f4a261");
addVietnamLayer("hoangsa.json", "#e76f51");

// ƒê·ªãnh nghƒ©a m√†u theo lo·∫°i h√¨nh c√¥ng ty
const typeColors = {
  technology: "#FFFF00",
  manufacturing: "#33FF57",
  finance: "#3385FF",
};

// D·ªØ li·ªáu c√¥ng ty s·∫Ω ƒë∆∞·ª£c load t·ª´ file JSON
var companies = [];

// Danh s√°ch marker hi·ªán c√≥
var markers = [];

// H√†m hi·ªÉn th·ªã c√°c c√¥ng ty tr√™n b·∫£n ƒë·ªì
function displayCompanies() {
  var typeFilter = document.getElementById("company-type").value;
  var sizeFilter = document.getElementById("company-size").value;
  var industryFilter = document.getElementById("company-industry").value;

  // X√≥a c√°c marker c≈©
  markers.forEach((marker) => map.removeLayer(marker));
  markers = [];

  companies.forEach((company) => {
    if (
      (typeFilter === "all" || company.type === typeFilter) &&
      (sizeFilter === "all" || company.size === sizeFilter) &&
      (industryFilter === "all" || company.industry === industryFilter)
    ) {
      var dot = L.circleMarker([company.lat, company.lng], {
        color: "#FFFFFF",
        fillColor: typeColors[company.type],
        fillOpacity: 1,
        radius: 6,
        weight: 2,
        pane: "markerPane",
      }).addTo(map);

      dot.bindPopup(
        `üìç <b>${company.name}</b><br>Size: ${company.size}<br>Industry: ${company.industry}`
      );

      dot.bringToFront();
      markers.push(dot);
    }
  });

  map._renderer._update();

  setTimeout(() => {
    markers.forEach((marker) => marker.bringToFront());
  }, 500);
}

// Load d·ªØ li·ªáu c√¥ng ty t·ª´ file companies.json v√† hi·ªÉn th·ªã
$.getJSON("companies.json")
  .done(function (data) {
    companies = data;
    displayCompanies();
  })
  .fail(function (err) {
    console.error("Error loading companies data:", err);
  });

// Th√™m s·ª± ki·ªán thay ƒë·ªïi gi√° tr·ªã l·ªçc
document
  .querySelectorAll("#company-type, #company-size, #company-industry")
  .forEach((select) => select.addEventListener("change", displayCompanies));

document.getElementById("reset-filter").addEventListener("click", function () {
  document
    .querySelectorAll("#company-type, #company-size, #company-industry")
    .forEach((select) => (select.value = "all"));
  displayCompanies();
});
